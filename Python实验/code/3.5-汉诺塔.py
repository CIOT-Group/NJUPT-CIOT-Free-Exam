# 编程解决Hanoi塔问题。
# Hanoi塔问题的描述是：有3个底座（分别标记为A、B和C）各有一根针，A座的针上已从下往上从大到小依次叠放了64个（简单起见用3个盘子表示）大小不同的盘子，要求将A座针上的盘子全部搬到C座的针上。在搬运过程中可以借助于B座的针，每次只能搬一个盘子，任何时候每根针上的盘子都必须保持大盘子在下小盘子在上的叠放顺序。
# 编写自定义函数hanoi(a,b,c,n)显示出盘子的搬运过程，a、b、c代表三个底座，n表示盘子的数量。如 a->b表示从a搬到b。

def hanoi(a, b, c, n):
    if n == 1:
        print(f"{a} -> {c}")  # 当只有一个盘子时，直接从a搬到c
    else:
        hanoi(a, c, b, n - 1)  # 将 n-1 个盘子从 a 经由 c 移动到 b
        print(f"{a} -> {c}")  # 移动剩下的一个盘子从 a 到 c
        hanoi(b, a, c, n - 1)  # 将 n-1 个盘子从 b 经由 a 移动到 c


hanoi("A", "B", "C", 3)
